// @autogenerated

// WARNING THIS FILE IS AUTOGENERATED! DO NOT EDIT!

// Developer note: these files are treated as templates and called from prebuild.js
// They shouldn't be imported and used directly.

import React from 'react';
import { Link } from 'gatsby';
import onChangeGenerator from '../../commons/onChangeGenerator';
import P from '@govtnz/ds/build/react-ts/P';
import '../../commons/styles/ds/themed-P.scss';
import H2 from '@govtnz/ds/build/react-ts/H2';
import '../../commons/styles/ds/themed-H2.scss';
import Ul from '@govtnz/ds/build/react-ts/Ul';
import '../../commons/styles/ds/themed-Ul.scss';
import Li from '@govtnz/ds/build/react-ts/Li';
import '../../commons/styles/ds/themed-Li.scss';
import A from '@govtnz/ds/build/react-ts/A';
import '../../commons/styles/ds/themed-A.scss';
import components__Checkboxes from '../../commons/examples/components__Checkboxes';
// Indirect relative import because this template is output to src/pages/components so it needs to step back to `commons`.
import ComponentPage from '../../commons/component-page';
import ComponentCode from '../../commons/component-code';
import Example from '../../commons/Example';
import ExampleContainer from '../../commons/ExampleContainer';
import ExampleHeading from '../../commons/ExampleHeading';
import ExampleSection from '../../commons/ExampleSection';
import MainNavMobileMenuContext from '../../commons/MainNavMobileMenuContext';
import '../../commons/styles/ds/themed-Button.scss';
import '../../commons/styles/ds/themed-CaptionL.scss';

const PageContent = (props) => <React.Fragment><P styleSize="large">Checkboxes enable users to select one or more options from a visible list of options, and to toggle a single option on or off.</P>

<H2 styleSize="large" id="examples">Examples</H2>
<P>Interact with each example to see how it works.</P>
<ExampleContainer>
    <ExampleHeading level={3}></ExampleHeading>
    <Example  code={components__Checkboxes[0]} iframeProps={{
        id:"iframe_componentsCheckboxes0",
        className: "example__iframe",
        src:"/components/Checkboxes__example0.html",
        title:"Example: Checkboxes",
        height: 360
      }}></Example>
</ExampleContainer>

<ExampleContainer>
    <ExampleHeading level={3}>Error</ExampleHeading>
    <Example  code={components__Checkboxes[1]} iframeProps={{
        id:"iframe_componentsCheckboxes1",
        className: "example__iframe",
        src:"/components/Checkboxes__example1.html",
        title:"Example: Error state (Checkboxes)",
        height: 284
      }}></Example>
</ExampleContainer>

<ExampleContainer>
    <ExampleHeading level={3}>Checkboxes with hints</ExampleHeading>
    <Example  code={components__Checkboxes[2]} iframeProps={{
        id:"iframe_componentsCheckboxes2",
        className: "example__iframe",
        src:"/components/Checkboxes__example2.html",
        title:"Example: Checkboxes with hints",
        height: 320
      }}></Example>
</ExampleContainer>

<h2 id="when-to-use-it">When to use it</h2>
<P>Use the checkboxes component when you need to help users:</P>
<Ul>
<Li>select one or more options from a list</Li>
<Li>toggle a single option on or off.</Li>
</Ul>
<h2 id="when-not-to-use-it">When not to use it</h2>
<P>Do not use the <A className="g-link"  href="https://design-system-alpha.digital.govt.nz/components/Checkboxes/">checkboxes component</A> if users can only choose one option from a selection. In this case, use <Link className="g-link" to="/components/Radios/">radio buttons</Link> instead.</P>
<h2 id="how-it-works">How it works</h2>
<P>Checkboxes are grouped together in a <code>&lt;fieldset&gt;</code> with a <code>&lt;legend&gt;</code> that describes them, as shown in the examples on this page. This is usually a question, like ‘Who are your providers?’.</P>
<P>If you are asking just one question per page, you can set the contents of the <code>&lt;legend&gt;</code> as the page heading. This is good practice because users of screen readers will only hear the contents once.</P>
<P>Always position each checkbox to the left of its label. This makes it easier to find, especially for users of screen magnifiers.</P>
<P>Unlike with radio buttons, users can select multiple checkboxes from a list. Do not assume that users will know how many checkboxes they can select based on only the visual difference between radio buttons and checkboxes.</P>
<P>If needed, add a hint to explain this, like ‘Select all that apply’.</P>
<P>Do not pre-select checkboxes as users are likely to:</P>
<Ul>
<Li>not realise they’ve missed a question</Li>
<Li>submit the wrong answer.</Li>
</Ul>
<P>Order checkbox labels alphabetically by default.</P>
<P>In some cases, pre-selected ordering can be helpful, such as listing options from the most to the least common. An example is ordering answers to the question ‘What is your nationality?’ based on population size.</P>
<P>Another example of pre-selected ordering is listing options chronologically. For example, you could order possible time periods for contact from earliest to latest, so users can select the periods that suit them best.</P>
<P>However, using pre-selected ordering could reinforce bias in your service, so use it with caution. If in doubt, order alphabetically.</P>
<h2 id="credit">Credit</h2>
<P>Guidance, original HTML and CSS derived from <A className="g-link"  href="https://github.com/alphagov/govuk-frontend">GOV.UK Design System</A>.</P>
</React.Fragment>

export default function Code(props) {
  return (
    <ComponentPage
      title={"Checkboxes"}
      id={"Checkboxes"}
      pageProps={props}
      PageContent={PageContent}
    />
  );
}
